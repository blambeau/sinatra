<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>Sinatra Internals</title>
  <script src="http://code.jquery.com/jquery-1.5.min.js" type="text/javascript"></script>
  <link rel="stylesheet" type="text/css" href="style.css">
  <script type="text/javascript">
    function configDotRu() {
      alert("coucou");
    };
  </script>
</head>
<body>

<h1>Sinatra Internals</h1>

<p>First, a rack application is simply a 
<a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">Rack middleware</a> 
that is, a class responding to <code>call(env)</code>. Even if you use Sinatra without explicitely
creating a Rack configuration (i.e. <code>config.ru</code>) or without making explicit usage of the  
<code>Sinatra::Base</code> class, your web application will end up as an instance of that class.</p>

<p>The Rack middleware contract is really simple at first glance: the <code>call</code> method takes 
an <code>env</code> parameter (a Hash containing everything about the current HTTP request) and has
to return a triple <code>[status, headers, body]</code> that represents the response to the request
(see left-most arrows in the scenario below).</p>

<<+{1-rack-call.html}

<<+{2-dispatch.html}

</body>
</html>